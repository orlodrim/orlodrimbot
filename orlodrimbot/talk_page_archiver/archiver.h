#ifndef TALK_PAGE_ARCHIVER_ARCHIVER_H
#define TALK_PAGE_ARCHIVER_ARCHIVER_H

#include <memory>
#include <set>
#include <string>
#include <vector>
#include "mwclient/parser.h"
#include "mwclient/wiki.h"
#include "algorithm.h"
#include "archive_template.h"

namespace talk_page_archiver {

// Archives pages using {{Archivage par bot}}.
class Archiver {
public:
  Archiver(mwc::Wiki* wiki, const std::string& dataDir, const std::string& keyPrefixFile, bool dryRun);
  // Archives all pages that contain the template.
  void archiveAll();
  // Archives specific pages.
  void archivePages(const std::vector<std::string>& pages);

private:
  // Throws: ArchiverError.
  void checkArchiveName(const std::string& title, const std::string& archive, const std::string& rawArchive,
                        const std::string& key);
  void updateCounterInCode(std::string& wcode, int newValue);
  // Throws: ArchiverError, WikiError.
  void archivePageWithCode(const std::string& title, const ArchiveParams& params, const mwc::WriteToken& writeToken,
                           const std::string& wcode, bool& inStableState);
  // Throws: ArchiverError, WikiError.
  void archivePage(const std::string& title);

  mwc::Wiki* m_wiki = nullptr;
  std::string m_dataDir;
  std::string m_keyPrefix;
  bool m_dryRun = false;
  std::set<mwc::revid_t> m_stableRevids;
  Algorithms m_algorithms;
};

// Helper function to implement the special behavior for pages that contain {{Utilisateur:OrlodrimBot/Suivi cat√©gorie}}
// (see https://fr.wikipedia.org/wiki/Utilisateur:OrlodrimBot/Suivi_cat%C3%A9gorie#Archivage).
// Extracts the part of the page generated by the category tracking template, so that this part can be archived while
// the rest is left unchanged.
bool extractTrackingTemplate(mwc::Wiki* wiki, const std::string& code,
                             std::unique_ptr<wikicode::Template>& trackingTemplate, std::string& codeInTemplate,
                             std::string& header, std::string& footer);

}  // namespace talk_page_archiver

#endif
